#![allow(dead_code)]

use neqo_crypto::*;
use std::mem;

pub const NOW: u64 = 2_000_000;

pub fn forward_records(
    now: u64,
    agent: &mut SecretAgent,
    records_in: RecordList,
) -> Res<RecordList> {
    let mut expected_state = match agent.state() {
        HandshakeState::New => HandshakeState::New,
        _ => HandshakeState::InProgress,
    };
    let mut records_out = RecordList::default();
    for record in records_in.into_iter() {
        assert_eq!(records_out.len(), 0);
        assert_eq!(*agent.state(), expected_state);

        records_out = agent.handshake_raw(now, Some(record))?;
        expected_state = HandshakeState::InProgress;
    }
    Ok(records_out)
}

fn handshake(now: u64, client: &mut SecretAgent, server: &mut SecretAgent) {
    let mut a = client;
    let mut b = server;
    let mut records = a.handshake_raw(now, None).unwrap();
    let is_done = |agent: &mut SecretAgent| match *agent.state() {
        HandshakeState::Complete(_) | HandshakeState::Failed(_) => true,
        _ => false,
    };
    while !is_done(a) || !is_done(b) {
        records = match forward_records(now, &mut b, records) {
            Ok(r) => r,
            _ => {
                // TODO(mt) take the alert generated by the failed handshake
                // and allow it to be sent to the peer.
                return;
            }
        };

        if *b.state() == HandshakeState::AuthenticationPending {
            b.authenticated();
            records = b.handshake_raw(now, None).unwrap();
        }
        b = mem::replace(&mut a, b);
    }
}

pub fn connect_at(now: u64, client: &mut SecretAgent, server: &mut SecretAgent) {
    handshake(now, client, server);
    assert!(client.state().connected());
    assert!(server.state().connected());
}

pub fn connect(client: &mut SecretAgent, server: &mut SecretAgent) {
    connect_at(NOW, client, server);
}

pub fn connect_fail(client: &mut SecretAgent, server: &mut SecretAgent) {
    handshake(NOW, client, server);
    assert!(!client.state().connected());
    assert!(!server.state().connected());
}

#[derive(Clone, Copy, Debug)]
pub enum Resumption {
    WithoutZeroRtt,
    WithZeroRtt,
}

// Note units of microseconds; this needs to be > 2000 to avoid it rounding to zero when halved.
pub const ANTI_REPLAY_WINDOW: u64 = 10_000;

pub fn resumption_setup(z: Resumption) -> Vec<u8> {
    init_db("./db");
    // We need to pretend that initialization was in the past.
    // That way, the anti-replay filter is cleared when we try to connect at |NOW|.
    Server::init_anti_replay(NOW - ANTI_REPLAY_WINDOW, ANTI_REPLAY_WINDOW, 1, 3)
                .expect("anti-replay setup successful");

    let mut client = Client::new("server.example").expect("should create client");
    let mut server = Server::new(&["key"]).expect("should create server");
    if let Resumption::WithZeroRtt = z {
        client
            .set_option(Opt::EarlyData, true)
            .expect("should enable 0-RTT");
        server
            .set_option(Opt::EarlyData, true)
            .expect("should enable 0-RTT");
    }

    connect(&mut client, &mut server);

    assert!(!client.info().unwrap().resumed());
    assert!(!server.info().unwrap().resumed());
    assert!(!client.info().unwrap().early_data_accepted());
    assert!(!server.info().unwrap().early_data_accepted());

    let server_records = server.send_ticket(NOW, &[]).expect("ticket sent");
    assert_eq!(server_records.len(), 1);
    let client_records = client
        .handshake_raw(NOW, server_records.into_iter().next())
        .expect("records ingested");
    assert_eq!(client_records.len(), 0);

    client.resumption_token().expect("token is present").clone()
}
